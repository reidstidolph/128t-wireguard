#!/usr/bin/env node
'use strict'

const fs = require('fs')
const dataFile = `${__dirname}/.wgdata.json`
const { spawn } = require('child_process')

const helpText = `
Usage: wgtool <cmd> [<args>]

A utility for managing a network of Wireguard peers, and generating config.
This is a wrapper around 'qrencode' and 'wg', so make sure they are installed on the host running this tool.

Available subcommands:
  init     : Initialize the Wireguard network.
  addspoke : Builds a new spoke peer.
  addhub   : Builds a new hub peer.
  getpeer  : Get Wireguard config for a peer assigned in the network.
  getpeers : Get names and IP addresses of peers
  getqr    : Get QR encoded Wireguard config for a peer assigned in the network.
  delpeer  : Removes a peer from the network.

`

const initHelp = `
Usage: wgtool init '<JSON>'

Initializes the wireguard network, by creating an initial hub peer.
Network data is saved in '.wgdata.json'.

Example:
  wgtool init '{"network":"10.10.128.0/24", "endpoint":"1.1.1.1", "port":"12800", "networks": ["10.0.0.0/24","192.168.1.0/24"], "dns": ["1.1.1.1","8.8.8.8"]}'

JSON Parameters:
  network  : Network prefix of Wireguard network. Added peers will be allocated from this network.
  endpoint : Address at which the initial hub peer will be reached by spoke peers.
  port     : Port on which the initial hub peer will listen for Wireguard packets.
  networks : Address prefixes to be routed to the initial hub peer.
  dns      : DNS servers IPs provided to network spoke peers.
`

const addspokeHelp = `
Usage: wgtool addspoke '<JSON>'

Example:
  wgtool addspoke '{"name":"my-mobile"}'

JSON Parameters:
  name : Friendly name for peer.
`

const addhubHelp = `
Usage: wgtool addhub '<JSON>'

Adds a hub to the wireguard network.

Hub Example:
  wgtool addhub '{"name":"another-gateway", "endpoint":"2.2.2.2", "port":"12800", "networks": ["172.16.0.0/24"]}'

JSON Parameters:
  name     : Friendly name for peer.
  endpoint : (optional) Address at which the hub peer will be reached by spoke peers.
  port     : Port on which the hub peer will listen for Wireguard packets.
  networks : Address prefixes to be routed to the initial hub peer.
`

const getpeerHelp = `
Usage: wgtool getpeer 'string'

Retrieve wireguard config for a peer based on name, or by wireguard IP address.

Example:
  wgtool getpeer 'foo'
  wgtool getpeer '10.10.128.2'
`

const getqrHelp = `
Usage: wgtool getqr 'string'

Retrieve QR encoded wireguard config for a peer based on name, or by wireguard IP address.

Example:
  wgtool getpeer 'foo'
  wgtool getpeer '10.10.128.2'
`
const delpeerHelp = `
Usage: wgtool delpeer 'string'

Delete wireguard peer based on name, or by wireguard IP address.

Example:
  wgtool delpeer 'foo'
  wgtool delpeer '10.10.128.2'
`

var wgData = {
  network : null,
  dns : null,
  peers : {}
}

// populated on .wgdata file load
var wgNetworkInfo = {}

const ipTools = {
  "ipRegex": /\b(?<octet1>25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.(?<octet2>25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.(?<octet3>25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.(?<octet4>25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b/,
  "prefixRegex": /\b(?<octet1>25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.(?<octet2>25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.(?<octet3>25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.(?<octet4>25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/(?<prefix>[0-9]|[1-2][0-9]|3[0-2])\b/,
  "ipIsValid": function(ipAddr){
    return this.ipRegex.test(ipAddr)
  },
  "portIsValid": function(port){
    let intPort = parseInt(port)
    if (intPort > 0 && intPort <= 65535) {
      return true
    } else {
      return false
    }
  },
  "prefixIsValid": function(prefix){
    return this.prefixRegex.test(prefix)
  },
  "getOctets": function(ipAddr){
    /*
    returns object with the following keys:
      {
        octet1: 1,
        octet2: 2,
        octet3: 3,
        octet4: 4
      }
    */
    let match = this.ipRegex.exec(ipAddr)
    return {
      "octet1":parseInt(match.groups.octet1),
      "octet2":parseInt(match.groups.octet2),
      "octet3":parseInt(match.groups.octet3),
      "octet4":parseInt(match.groups.octet4)
    }
  },
  "getNetworkInfo": function(prefix){
    /*
    returns object with the following keys:
      {
        octet1: 1,
        octet2: 2,
        octet3: 3,
        octet4: 4,
        networkPrefix: 21,
        wildcardPrefix: 11,
        usableAddressCount: 2046,
        octet1Wildcard: 0,
        octet1Mask: 255,
        octet1Min: 1,
        octet1Max: 1,
        octet2Wildcard: 0,
        octet2Mask: 255,
        octet2Min: 2,
        octet2Max: 2,
        octet3Wildcard: 7,
        octet3Mask: 248,
        octet3Min: 0,
        octet3Max: 7,
        octet4Wildcard: 255,
        octet4Mask: 0,
        octet4Min: 0,
        octet4Max: 255
      }
    */
    let match = this.prefixRegex.exec(prefix)
    let networkInfo = {
      "octet1":parseInt(match.groups.octet1),
      "octet2":parseInt(match.groups.octet2),
      "octet3":parseInt(match.groups.octet3),
      "octet4":parseInt(match.groups.octet4),
      "networkPrefix": parseInt(match.groups.prefix)
    }

    networkInfo.wildcardPrefix = 32 - networkInfo.networkPrefix
    networkInfo.usableAddressCount = Math.pow(2, networkInfo.wildcardPrefix) - 2

    let wildcardNetmaskBoundry = Math.floor(networkInfo.networkPrefix / 8)
    for (let i = 0; i < 4; i++) {
      if (i === wildcardNetmaskBoundry) {
        // figure out mask
        let binaryString = ""
        for (let j = 0; j < networkInfo.wildcardPrefix % 8; j++) {
          binaryString += "1"
        }
        if (binaryString === "") {
          networkInfo[`octet${i+1}Wildcard`] = 255
          networkInfo[`octet${i+1}Mask`] = 0
        } else {
          networkInfo[`octet${i+1}Wildcard`] = parseInt(binaryString, 2)
          networkInfo[`octet${i+1}Mask`] = 255 - networkInfo[`octet${i+1}Wildcard`]
        }
        networkInfo[`octet${i+1}Min`] = networkInfo[`octet${i+1}`] & networkInfo[`octet${i+1}Mask`]
        networkInfo[`octet${i+1}Max`] = networkInfo[`octet${i+1}`] | networkInfo[`octet${i+1}Wildcard`]
      } else if (i < wildcardNetmaskBoundry) {
        networkInfo[`octet${i+1}Wildcard`] = 0
        networkInfo[`octet${i+1}Mask`] = 255
        networkInfo[`octet${i+1}Min`] = networkInfo[`octet${i+1}`]
        networkInfo[`octet${i+1}Max`] = networkInfo[`octet${i+1}`]
      } else if (i > wildcardNetmaskBoundry) {
        networkInfo[`octet${i+1}Wildcard`] = 255
        networkInfo[`octet${i+1}Mask`] = 0
        networkInfo[`octet${i+1}Min`] = 0
        networkInfo[`octet${i+1}Max`] = 255
      }
    }
    return networkInfo
  }
}

const wg = {

  /**
   * Generate a private key.
   *
   * @return {Promise} Promised results public key generation.
   *
  */
  genPrivKey: function(){
    return new Promise((resolve, reject)=>{
      let output = ""
      let wgKeyGen = spawn('wg', ['genkey'])

      wgKeyGen.stdout.on('data', (data) => {
        output = data.toString().replace(/\n$/, '')
      })

      wgKeyGen.stderr.on('data', (data) => {
        output = data.toString().replace(/\n$/, '')
      })

      wgKeyGen.on('close', (code) => {
        if (code !== 0) {
          reject(output)
        } else {
          resolve(output)
        }
      })
    })
  },

  /**
   * Generate a public key.
   *
   * @param {string} privkey - private key
   * @return {Promise} Promised results public key generation.
   *
  */
  genPubKey: function(privkey){
    return new Promise((resolve, reject)=>{
      let output = ""
      let wgKeyGen = spawn('wg', ['pubkey'])

      wgKeyGen.stdin.write(privkey)
      wgKeyGen.stdin.end()

      wgKeyGen.stdout.on('data', (data) => {
        output = data.toString().replace(/\n$/, '')
      })

      wgKeyGen.stderr.on('data', (data) => {
        output = data.toString().replace(/\n$/, '')
      })

      wgKeyGen.on('close', (code) => {
        if (code !== 0) {
          reject(output)
        } else {
          resolve(output)
        }
      })
    })
  }
}

/**
 * Initialize the tool.
 *
 * @param {object} indexPeer - initial peer
 *
*/
async function initialize(indexPeer){

  // see if input can be parsed as JSON
  var peerInput
  try {
    peerInput = JSON.parse(indexPeer)
  } catch (err) {
    console.log('ERROR: unable to parse input as JSON.')
    console.log(initHelp)
    process.exit(1)
  }
  // validate properties
  if (!peerInput.network || !peerInput.endpoint || !Array.isArray(peerInput.networks)) {
    console.log('ERROR: required properties missing.')
    console.log(initHelp)
    process.exit(1)
  }
  // validate ip
  if (!ipTools.prefixIsValid(peerInput.network)) {
    console.log(`ERROR: invalid network value '${peerInput.network}'`)
    console.log(initHelp)
    process.exit(1)
  }
  // validate endpoint
  if (!ipTools.ipIsValid(peerInput.endpoint)) {
    console.log(`ERROR: invalid endpoint value '${peerInput.endpoint}'`)
    console.log(initHelp)
    process.exit(1)
  }
  // validate port number
  if (!ipTools.portIsValid(peerInput.port)) {
    console.log(`invalid port value '${peerInput.port}'`)
    console.log(addhubHelp)
    process.exit(1)
  }
  // validate prefixes
  peerInput.networks.forEach((prefix)=>{
    if (!ipTools.prefixIsValid(prefix)) {
      console.log(`ERROR: invalid prefix '${prefix}'`)
      console.log(initHelp)
      process.exit(1)
    }
  })

  // validate DNS IPs
  peerInput.dns.forEach((dnsIp)=>{
    if (!ipTools.ipIsValid(dnsIp)) {
      console.log(`ERROR: invalid dns address '${dnsIp}'`)
      console.log(initHelp)
      process.exit(1)
    }
  })

  // inputs validated

  let networkInfo = ipTools.getNetworkInfo(peerInput.network)
  wgData.network = `${networkInfo.octet1Min}.${networkInfo.octet2Min}.${networkInfo.octet3Min}.${networkInfo.octet4Min}/${networkInfo.networkPrefix}`
  wgData.dns = peerInput.dns
  wgData.peers = {}
  let firstIp = `${networkInfo.octet1Min}.${networkInfo.octet2Min}.${networkInfo.octet3Min}.${networkInfo.octet4Min + 1}`
  try {
    wgData.peers[firstIp] = await genPeer("gateway", peerInput.networks, peerInput.endpoint, peerInput.port)
    await writeDataFile(wgData)
    // initialized
    console.log('initialized.')
    process.exit(0)
  } catch (err) {
    console.error(err)
    process.exit(1)
  }
}

function getNextIp(){
  // iterate through peers to look for previously allocated, but now available addresses
  for (var peerKey in wgData.peers) {
    if (wgData.peers[peerKey] === null ) {
      return peerKey
      break
    }
  }
  // all addresses used, allocate a new one
  let numberOfAssignedIps = Object.keys(wgData.peers).length

  // no more available, exit
  if (numberOfAssignedIps >= wgNetworkInfo.usableAddressCount) {
    console.log('out of ip addresses')
    process.exit(1)
  }

  // return next available
  let nextNum = numberOfAssignedIps + 1
  let nextOctet1 = ( wgNetworkInfo.octet1Min | Math.floor(nextNum / 16777216))
  let nextOctet2 = ( wgNetworkInfo.octet2Min | Math.floor(nextNum / 65536))
  let nextOctet3 = ( wgNetworkInfo.octet3Min | Math.floor(nextNum / 256))
  let nextOctet4 = ( wgNetworkInfo.octet4Min | nextNum % 256)
  return `${nextOctet1}.${nextOctet2}.${nextOctet3}.${nextOctet4}`
}

/**
 * encode data as QR code
 *
 * @param {string} input - input string to be encoded
 * @return {Promise} Promised results of reading QR code data.
 *
*/
function qrGen(input){
  return new Promise((resolve, reject)=>{
    let output
    let bufferArray = []

    let qrEncode = spawn('qrencode', ['-t', 'ansiutf8'])

    qrEncode.on('error', (err)=>{
      console.error('ERROR: unable to spawn qrencode process.')
      process.exit(1)
    })

    qrEncode.stdin.write(input)
    qrEncode.stdin.end()

    qrEncode.stdout.on('data', (data) => {
      bufferArray.push(data)
    })

    qrEncode.on('close', (code) => {
      if (code !== 0) {
        reject(`qrencode process failed with code '${code}'`)
      } else {
        resolve(Buffer.concat(bufferArray))
      }
    })
  })
}

/**
 * Function generating a peer object.
 *
 * @param {string} name - friendly name of peer
 * @param {array} networks - ip/prefixes for peer
 * @param {string} endpoint - ip of peer endpoint
 * @return {Promise} Promised results of generated peer object.
 *
*/
function genPeer(name, networks, endpoint, port){
  return new Promise((resolve, reject)=>{
    async function genkeys(){
      try {
        let privkey = await wg.genPrivKey()
        let pubkey = await wg.genPubKey(privkey)
        let peer = {"name":name,"endpoint":endpoint,"port":port,"networks":networks,"priv":privkey,"pub":pubkey}
        resolve(peer)
      } catch (err) {
        reject(err)
      }
    }
    genkeys()
  })
}

/**
 * Function for writing json object to file.
 *
 * @param {object} data - object to write to file
 * @return {Promise} Promised results of reading the module file.
 *
*/
function writeDataFile(data) {
  return new Promise((resolve, reject) => {
    fs.writeFile(dataFile, JSON.stringify(data, null, 2),  { mode: 0o600 }, (err) => {
      if (err) {
        // unable to write file
        reject(err)
      } else {
        resolve()
      }
    })
  })
}

/**
 * Generate peer wireguard config
 *
 * @param {string} peerKey - IP address of peer, as key for lookup in wgData.peers
 * @return {string} wireguard config string
 *
*/
function peerToConf(peerKey){

  let peer = wgData.peers[peerKey]

  if (peer.endpoint === null) {

    // spoke

    let conf = `[Interface]
# ${peer.name}
Address = ${peerKey}/32
PrivateKey = ${peer.priv}`

    // get DNS servers
    for (var key in wgData.dns) {
      conf += `\nDNS = ${wgData.dns[key]}`
    }

    // find hub peers
    for (var key in wgData.peers) {
      let remotePeer = wgData.peers[key]
      if (remotePeer !== null && remotePeer.endpoint !== null) {
        // got hub
        // generate allowed IPs
        let allowedIps = []

        remotePeer.networks.forEach((prefix)=>{
          allowedIps.push(`AllowedIPs = ${prefix}`)
        })

        conf+=`

[Peer]
# ${remotePeer.name}
PublicKey = ${remotePeer.pub}
${allowedIps.join('\n')}
Endpoint = ${remotePeer.endpoint}:${remotePeer.port}`

      }
    }
    // return conf string
    return conf
  } else if (peer.endpoint) {

    // hub

    let conf = `[Interface]
# ${peer.name}
ListenPort = ${peer.port}
PrivateKey = ${peer.priv}`

    // find spoke peers
    for (var key in wgData.peers) {
      let remotePeer = wgData.peers[key]
      if (remotePeer.endpoint === null) {
        // got spoke
        conf+=`

[Peer]
# ${remotePeer.name}
PublicKey = ${remotePeer.pub}
AllowedIPs = ${key}/32`
      }
    }
    // return conf string
    return conf
  }
}

/**
 * Lookup peer in wgData
 *
 * @param {string} peerIdentifier - string containing IP address of peer
 * @return {string} wgData peer key, or null if not found
 *
*/
function peerLookup(peerIdentifier){

  function searchByName(string){
    for (var peerKey in wgData.peers) {
      if (wgData.peers[peerKey] !== null && wgData.peers[peerKey].name === string ) {
        return peerKey
        break
      }
    }
    return false
  }

  let nameLookup = searchByName(peerIdentifier)

  if (nameLookup) {
    return nameLookup
  } else if (wgData.peers[peerIdentifier]) {
    return peerIdentifier
  } else {
    return null
  }
}

/**
 * Get peer config
 *
 * @param {string} peerIdentifier - string containing IP address of peer
 * @return {string} wireguard config string
 *
*/
function getPeer(peerIdentifier) {

  let peer = peerLookup(peerIdentifier)

  if (peer || peer != null) {
    return peerToConf(peer)
  } else {
    console.log('ERROR: peer not found')
    console.log(getpeerHelp)
    process.exit(1)
  }
}

/**
 * Delete a peer config
 *
 * @param {string} peerIdentifier - string containing IP address of peer
 * @return {string} wireguard config string
 *
*/
async function delPeer(peerIdentifier) {

  if (peerIdentifier === 'gateway' || peerIdentifier === `${wgNetworkInfo.octet1Min}.${wgNetworkInfo.octet2Min}.${wgNetworkInfo.octet3Min}.${wgNetworkInfo.octet4Min + 1}`) {
    console.log('ERROR: deleting gateway peer not allowed')
    console.log(delpeerHelp)
    process.exit(1)
  }

  let peer = peerLookup(peerIdentifier)

  if (peer || peer != null) {
    try {
      wgData.peers[peer] = null

      await writeDataFile(wgData)
      // deleted
      console.log(`deleted peer '${peer}'`)
      process.exit(0)
    } catch (err) {
      console.error(err)
      process.exit(1)
    }
  } else {
    console.log('ERROR: peer not found')
    console.log(delpeerHelp)
    process.exit(1)
  }
}

/**
 * Log peers
 *
*/
function getPeers() {

  for (var key in wgData.peers) {
    let peer = wgData.peers[key]
    let type
    if (wgData.peers[key].endpoint === null ) {
      type = 'spoke'
      console.log(`${key} ${type} ${peer.name}`)
    } else {
      type = 'hub'
      console.log(`${key} ${type}   ${peer.name}`)
    }
  }
}
/**
 * Get QR encoded peer config
 *
 * @param {string} peerIdentifier - string containing IP address or name of peer
 * @return {Promise} Promised results of peer QR encode
 *
*/
async function getPeerQr(peerIdentifier){

  let peer = peerLookup(peerIdentifier)

  if (peer || peer != null) {
    let peerConf = peerToConf(peer)
    try {
      let qr = await qrGen(peerConf)
      return qr
    } catch (err) {
      console.error('ERROR: unable to generate QR')
      console.error(err);
      process.exit(1)
    }
  } else {
    console.log('ERROR: peer not found')
    console.log(getqrHelp)
    process.exit(1)
  }
}

/**
 * Add a new spoke peer
 *
 * @param {object} peerInput - object container peer settings
 * @return {string} wireguard config string
 *
*/
async function addspoke(peerInput){
  // see if input can be parsed as JSON
  try {
    peerInput = JSON.parse(peerInput)
  } catch (err) {
    console.log('unable to parse input as JSON.')
    console.log(addspokeHelp)
    process.exit(1)
  }
  // validate name input
  if (!peerInput.name) {
    console.log('required properties missing.')
    console.log(addspokeHelp)
    process.exit(1)
  }

  // input validated

  let nextIp = getNextIp()
  console.log(nextIp)
  if (!peerInput.networks || !peerInput.endpoint) {
    peerInput.endpoint = null
    peerInput.port = null
    peerInput.networks = [`${nextIp}/32`]
  }
  try {
    wgData.peers[nextIp] = await genPeer(peerInput.name, peerInput.networks, peerInput.endpoint, peerInput.port)
    await writeDataFile(wgData)
    // initialized
    console.log('added.')
    process.exit(0)
  } catch (err) {
    console.error(err)
    process.exit(1)
  }
}

/**
 * Add a new spoke peer
 *
 * @param {object} peerInput - object container peer settings
 * @return {string} wireguard config string
 *
*/
async function addhub(peerInput){
  // see if input can be parsed as JSON
  try {
    peerInput = JSON.parse(peerInput)
  } catch (err) {
    console.log('unable to parse input as JSON.')
    console.log(addhubHelp)
    process.exit(1)
  }
  // validate name input
  if (!peerInput.name || !peerInput.endpoint || !peerInput.port || !Array.isArray(peerInput.networks)) {
    console.log('required properties missing.')
    console.log(addhubHelp)
    process.exit(1)
  }
  // validate endpoint ip
  if (!ipTools.ipIsValid(peerInput.endpoint)) {
    console.log(`invalid endpoint value '${peerInput.endpoint}'`)
    console.log(addhubHelp)
    process.exit(1)
  }
  // validate port number
  if (!ipTools.portIsValid(peerInput.port)) {
    console.log(`invalid port value '${peerInput.port}'`)
    console.log(addhubHelp)
    process.exit(1)
  }
  // validate prefixes
  peerInput.networks.forEach((prefix)=>{
    if (!ipTools.prefixIsValid(prefix)) {
      console.log(`invalid prefix '${prefix}'`)
      console.log(addhubHelp)
      process.exit(1)
    }
  })


  // input validated

  let nextIp = getNextIp()
  console.log(nextIp)
  if (!peerInput.networks || !peerInput.endpoint) {
    peerInput.endpoint = null
    peerInput.networks = [`${nextIp}/32`]
  }
  try {
    wgData.peers[nextIp()] = await genPeer(peerInput.name, peerInput.networks, peerInput.endpoint, peerInput.port)
    await writeDataFile(wgData)
    // initialized
    console.log('added.')
    process.exit(0)
  } catch (err) {
    console.error(err)
    process.exit(1)
  }
}

//begin

// attempt data JSON import from file
try {
  wgData = require(dataFile)
  wgNetworkInfo = ipTools.getNetworkInfo(wgData.network)
} catch (err) {
  if (process.argv[2] === 'init') {
    initialize(process.argv[3])
  } else {
    console.log(`Initialization required. 'wgtool init'`)
    process.exit(1)
  }
}

switch (process.argv[2]) {

  case "init":
    initialize(process.argv[3])
  break
// retrieve a peer
  case "getpeer":
    console.log(getPeer(process.argv[3]))
  break
// retrieve peers summary
  case "getpeers":
    getPeers()
  break
// retrieve a peer qr encoded
  case "getqr":
    getPeerQr(process.argv[3])
    .then((qr)=>{
      process.stdout.write(qr)
    })
    .catch((err)=>{
      console.log(err)
    })
  break
// add a spoke peer object
  case "addspoke":
    addspoke(process.argv[3])
  break
// add a hub peer object
  case "addhub":
    addhub(process.argv[3])
  break
// delete a peer object
  case "delpeer":
    delPeer(process.argv[3])
  break

  default:
    console.log(helpText)
}
